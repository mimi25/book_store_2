{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport axios from \"axios\";\nimport setAuthToken from \"../setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nexport var registerUser = function registerUser(user, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", user).then(function (res) {\n      return history.push(\"./login\");\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var loginUser = function loginUser(user) {\n  return function (dispatch) {\n    axios.post(\"api/users/login\", user).then(function (res) {\n      var token = res.data.token;\n      localStorage.setItem(\"jwtToken\", token);\n      setAuthToken(token);\n      var decoded = jwt_decode(token);\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // So, from this file, we will send an AJAX request to the node.js server.\n// We can not write this code inside Reducer because otherwise,\n// it is a violation of pure function. So we need to write any database operations\n// from actions. If we get any errors, then we dispatch the actions and\n// reducer will handle that for us.","map":{"version":3,"sources":["/home/findev/Documents/projet1/book-store/Frontends/src/actions/LogActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","axios","setAuthToken","jwt_decode","registerUser","user","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,gBAArB,QAA6C,SAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAOC,OAAP;AAAA,SAAmB,UAAAC,QAAQ,EAAI;AACzDN,IAAAA,KAAK,CACFO,IADH,CACQ,qBADR,EAC+BH,IAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,SAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG,EAAI;AACZN,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEf,UADC;AAEPgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CAAR;AAID,KARH;AASD,GAV2B;AAAA,CAArB;AAYP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAb,IAAI;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC3CN,IAAAA,KAAK,CACFO,IADH,CACQ,iBADR,EAC2BH,IAD3B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AAAA,UACHS,KADG,GACOT,GAAG,CAACO,IADX,CACHE,KADG;AAEXC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAjB,MAAAA,YAAY,CAACiB,KAAD,CAAZ;AACA,UAAMG,OAAO,GAAGnB,UAAU,CAACgB,KAAD,CAA1B;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KARH,EASGV,KATH,CASS,UAAAC,GAAG,EAAI;AACZN,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEf,UADC;AAEPgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,OAAD,CAAR;AAID,KAdH;AAeD,GAhB4B;AAAA,CAAtB;AAkBP,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEd,gBADD;AAELe,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAMP;AACA;AACA;AACA;AACA","sourcesContent":["import { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\nimport axios from \"axios\";\nimport setAuthToken from \"../setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nexport const registerUser = (user, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", user)\n    .then(res => history.push(\"./login\"))\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\nexport const loginUser = user => dispatch => {\n  axios\n    .post(\"api/users/login\", user)\n    .then(res => {\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      setAuthToken(token);\n      const decoded = jwt_decode(token);\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err => {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n};\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n// So, from this file, we will send an AJAX request to the node.js server.\n// We can not write this code inside Reducer because otherwise,\n// it is a violation of pure function. So we need to write any database operations\n// from actions. If we get any errors, then we dispatch the actions and\n// reducer will handle that for us.\n"]},"metadata":{},"sourceType":"module"}