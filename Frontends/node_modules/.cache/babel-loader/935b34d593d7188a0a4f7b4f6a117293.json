{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultChipRenderer = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Notice: Some code was adapted from Material-UI's text field.\n *         Copyright (c) 2014 Call-Em-All (https://github.com/callemall/material-ui)\n */\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _TextFieldUnderline = require('material-ui/TextField/TextFieldUnderline');\n\nvar _TextFieldUnderline2 = _interopRequireDefault(_TextFieldUnderline);\n\nvar _TextFieldHint = require('material-ui/TextField/TextFieldHint');\n\nvar _TextFieldHint2 = _interopRequireDefault(_TextFieldHint);\n\nvar _TextFieldLabel = require('material-ui/TextField/TextFieldLabel');\n\nvar _TextFieldLabel2 = _interopRequireDefault(_TextFieldLabel);\n\nvar _AutoComplete = require('material-ui/AutoComplete/AutoComplete');\n\nvar _AutoComplete2 = _interopRequireDefault(_AutoComplete);\n\nvar _transitions = require('material-ui/styles/transitions');\n\nvar _transitions2 = _interopRequireDefault(_transitions);\n\nvar _Chip = require('material-ui/Chip');\n\nvar _Chip2 = _interopRequireDefault(_Chip);\n\nvar _colors = require('material-ui/styles/colors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar getStyles = function getStyles(props, context, state) {\n  var _context$muiTheme = context.muiTheme,\n      baseTheme = _context$muiTheme.baseTheme,\n      _context$muiTheme$tex = _context$muiTheme.textField,\n      floatingLabelColor = _context$muiTheme$tex.floatingLabelColor,\n      focusColor = _context$muiTheme$tex.focusColor,\n      textColor = _context$muiTheme$tex.textColor,\n      disabledTextColor = _context$muiTheme$tex.disabledTextColor,\n      backgroundColor = _context$muiTheme$tex.backgroundColor,\n      errorColor = _context$muiTheme$tex.errorColor;\n  var styles = {\n    root: {\n      fontSize: 16,\n      lineHeight: '24px',\n      width: props.fullWidth ? '100%' : 256,\n      display: 'inline-block',\n      position: 'relative',\n      backgroundColor: backgroundColor,\n      fontFamily: baseTheme.fontFamily,\n      transition: _transitions2.default.easeOut('200ms', 'height'),\n      cursor: 'text'\n    },\n    input: {\n      padding: 0,\n      marginTop: 0,\n      marginBottom: 24,\n      lineHeight: '32px',\n      height: 32,\n      position: 'relative',\n      display: 'inline-block',\n      border: 'none',\n      outline: 'none',\n      backgroundColor: 'rgba(0,0,0,0)',\n      color: props.disabled ? disabledTextColor : textColor,\n      cursor: props.disabled ? 'not-allowed' : 'initial',\n      font: 'inherit',\n      appearance: 'none',\n      // Remove border in Safari, doesn't seem to break anything in other browsers\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated style).\n      float: 'left'\n    },\n    error: {\n      position: 'absolute',\n      top: '100%',\n      fontSize: 12,\n      lineHeight: '12px',\n      color: errorColor,\n      transition: _transitions2.default.easeOut()\n    },\n    floatingLabel: {\n      color: props.disabled ? disabledTextColor : floatingLabelColor,\n      pointerEvents: 'none',\n      top: 28\n    },\n    floatingLabelFocusStyle: {\n      transform: 'scale(0.75) translate(0, -36px)'\n    },\n    defaultChip: {\n      margin: '8px 8px 0 0',\n      float: 'left'\n    },\n    chipContainer: {\n      marginTop: props.floatingLabelText ? 12 : 0\n    }\n  };\n\n  if (state.isFocused) {\n    styles.floatingLabel.color = focusColor;\n  }\n\n  if (props.floatingLabelText) {\n    styles.input.boxSizing = 'border-box';\n  }\n\n  if (state.errorText) {\n    if (state.isFocused) {\n      styles.floatingLabel.color = styles.error.color;\n    }\n  }\n\n  return styles;\n};\n\nvar defaultChipRenderer = exports.defaultChipRenderer = function defaultChipRenderer(_ref, key) {\n  var value = _ref.value,\n      text = _ref.text,\n      isFocused = _ref.isFocused,\n      isDisabled = _ref.isDisabled,\n      handleClick = _ref.handleClick,\n      handleRequestDelete = _ref.handleRequestDelete,\n      defaultStyle = _ref.defaultStyle;\n  return _react2.default.createElement(_Chip2.default, {\n    key: key,\n    style: _extends({}, defaultStyle, {\n      pointerEvents: isDisabled ? 'none' : undefined\n    }),\n    backgroundColor: isFocused ? _colors.blue300 : null,\n    onClick: handleClick,\n    onRequestDelete: handleRequestDelete\n  }, text);\n};\n\nvar ChipInput = function (_React$Component) {\n  _inherits(ChipInput, _React$Component);\n\n  function ChipInput(props) {\n    _classCallCheck(this, ChipInput);\n\n    var _this = _possibleConstructorReturn(this, (ChipInput.__proto__ || Object.getPrototypeOf(ChipInput)).call(this, props));\n\n    _this.state = {\n      isFocused: false,\n      errorText: undefined,\n      isClean: true,\n      chips: [],\n      focusedChip: null,\n      inputValue: ''\n    };\n\n    _this.handleInputBlur = function (event) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      } // A momentary delay is required to support openOnFocus. We must give time for the autocomplete\n      // menu to close before checking the current status. Otherwise, tabbing off the input while the\n      // menu is open results in the input keeping its focus styles. Note that the ref might not be set\n      // yet, so this.autocomplete might be null.\n\n\n      setTimeout(function () {\n        if (_this.autoComplete && (!_this.autoComplete.state.open || _this.autoComplete.requestsList.length === 0)) {\n          if (_this.props.clearOnBlur) {\n            _this.clearInput();\n          }\n\n          _this.setState({\n            isFocused: false\n          });\n        }\n      }, 0);\n    };\n\n    _this.handleInputFocus = function (event) {\n      if (_this.props.disabled) {\n        return;\n      }\n\n      _this.setState({\n        isFocused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      _this.setState({\n        keyPressed: false,\n        preventChipCreation: false\n      });\n\n      if (_this.props.newChipKeyCodes.indexOf(event.keyCode) >= 0) {\n        _this.handleAddChip(event.target.value);\n      } else if (event.keyCode === 8 || event.keyCode === 46) {\n        if (event.target.value === '') {\n          var chips = _this.props.value || _this.state.chips;\n\n          if (_this.state.focusedChip == null && event.keyCode === 8) {\n            _this.setState({\n              focusedChip: chips[chips.length - 1]\n            });\n          } else if (_this.state.focusedChip) {\n            var index = chips.findIndex(function (chip) {\n              return _this.props.dataSourceConfig ? _this.state.focusedChip[_this.props.dataSourceConfig.value] === chip[_this.props.dataSourceConfig.value] : _this.state.focusedChip === chip;\n            });\n            var value = _this.props.dataSourceConfig ? _this.state.focusedChip[_this.props.dataSourceConfig.value] : _this.state.focusedChip;\n\n            _this.handleDeleteChip(value, index);\n\n            if (event.keyCode === 8 && index > 0) {\n              _this.setState({\n                focusedChip: chips[index - 1]\n              });\n            } else if (event.keyCode === 46 && index < chips.length - 1) {\n              _this.setState({\n                focusedChip: chips[index + 1]\n              });\n            }\n          }\n        }\n      } else if (event.keyCode === 37) {\n        var _chips = _this.props.value || _this.state.chips;\n\n        if (_this.state.focusedChip == null && event.target.value === '' && _chips.length) {\n          return _this.setState({\n            focusedChip: _chips[_chips.length - 1]\n          });\n        }\n\n        var _index = _chips.findIndex(function (chip) {\n          return _this.props.dataSourceConfig && _this.state.focusedChip ? _this.state.focusedChip[_this.props.dataSourceConfig.value] === chip[_this.props.dataSourceConfig.value] : _this.state.focusedChip === chip;\n        });\n\n        if (_index > 0) {\n          _this.setState({\n            focusedChip: _chips[_index - 1]\n          });\n        }\n      } else if (event.keyCode === 39) {\n        var _chips2 = _this.props.value || _this.state.chips;\n\n        var _index2 = _chips2.findIndex(function (chip) {\n          return _this.props.dataSourceConfig && _this.state.focusedChip ? _this.state.focusedChip[_this.props.dataSourceConfig.value] === chip[_this.props.dataSourceConfig.value] : _this.state.focusedChip === chip;\n        });\n\n        if (_index2 >= 0 && _index2 < _chips2.length - 1) {\n          _this.setState({\n            focusedChip: _chips2[_index2 + 1]\n          });\n        } else {\n          _this.setState({\n            focusedChip: null\n          });\n        }\n      } else {\n        _this.setState({\n          focusedChip: null\n        });\n      }\n    };\n\n    _this.handleKeyUp = function (event) {\n      if (!_this.state.preventChipCreation && _this.props.newChipKeyCodes.indexOf(event.keyCode) > 0 && _this.state.keyPressed) {\n        _this.clearInput();\n      } else {\n        _this.setState({\n          inputValue: event.target.value\n        });\n      }\n    };\n\n    _this.handleKeyPress = function (event) {\n      _this.setState({\n        keyPressed: true\n      });\n    };\n\n    _this.handleUpdateInput = function (searchText, dataSource, params) {\n      _this.setState({\n        inputValue: searchText\n      });\n\n      if (_this.props.onUpdateInput) {\n        _this.props.onUpdateInput(searchText, dataSource, params);\n      }\n    };\n\n    _this.setAutoComplete = function (autoComplete) {\n      _this.autoComplete = autoComplete;\n    };\n\n    if (props.defaultValue) {\n      _this.state.chips = props.defaultValue;\n    }\n\n    return _this;\n  }\n\n  _createClass(ChipInput, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _props = this.props,\n          name = _props.name,\n          hintText = _props.hintText,\n          floatingLabelText = _props.floatingLabelText;\n      this.setState({\n        errorText: this.props.errorText\n      });\n      var uniqueId = name + '-' + hintText + '-' + floatingLabelText + '-' + Math.floor(Math.random() * 0xFFFF);\n      this.uniqueId = uniqueId.replace(/[^A-Za-z0-9-]/gi, '');\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var handleKeyDown = this.autoComplete.handleKeyDown;\n\n      this.autoComplete.handleKeyDown = function (event) {\n        var newChipKeyCodes = _this2.props.newChipKeyCodes;\n\n        if (newChipKeyCodes.indexOf(event.keyCode) >= 0 && event.target.value) {\n          event.preventDefault();\n\n          _this2.handleAddChip(event.target.value);\n\n          _this2.autoComplete.forceUpdate();\n        } else {\n          handleKeyDown(event);\n        }\n      };\n\n      var onAutocompleteItemClick = function onAutocompleteItemClick(event, child) {\n        var dataSource = _this2.autoComplete.props.dataSource;\n        var index = parseInt(child.key, 10);\n        var chosenRequest = dataSource[index];\n\n        _this2.handleAddChip(chosenRequest);\n\n        _this2.autoComplete.forceUpdate();\n\n        _this2.autoComplete.close();\n\n        setTimeout(function () {\n          return _this2.focus();\n        }, 1);\n      }; // Ensuring that ChipInput works with with Material-UI 0.19.1 and 0.20.0\n\n\n      if (this.autoComplete.handleItemClick) {\n        this.autoComplete.handleItemClick = onAutocompleteItemClick;\n      } else {\n        this.autoComplete.handleItemTouchTap = onAutocompleteItemClick;\n      } // force update autocomplete to ensure that it uses the new handlers\n\n\n      this.autoComplete.forceUpdate();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.disabled) {\n        this.setState({\n          focusedChip: null\n        });\n      }\n\n      if (nextProps.errorText !== this.props.errorText) {\n        this.setState({\n          errorText: nextProps.errorText\n        });\n      }\n    }\n  }, {\n    key: 'blur',\n    value: function blur() {\n      if (this.input) this.getInputNode().blur();\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      if (this.autoComplete) {\n        this.getInputNode().focus();\n\n        if (this.props.openOnFocus && !this.props.disabled) {\n          this.autoComplete.setState({\n            open: true,\n            anchorEl: this.getInputNode()\n          });\n          this.autoComplete.forceUpdate();\n        }\n      }\n\n      if (this.state.focusedChip) {\n        this.setState({\n          focusedChip: null\n        });\n      }\n    }\n  }, {\n    key: 'select',\n    value: function select() {\n      if (this.input) this.getInputNode().select();\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      return this.input ? this.getInputNode().value : undefined;\n    }\n  }, {\n    key: 'getInputNode',\n    value: function getInputNode() {\n      return this.autoComplete.refs.searchTextField.getInputNode();\n    }\n  }, {\n    key: 'handleAddChip',\n    value: function handleAddChip(chip) {\n      var _this3 = this;\n\n      if (this.props.onBeforeRequestAdd && !this.props.onBeforeRequestAdd(chip)) {\n        return this.setState({\n          preventChipCreation: true\n        });\n      }\n\n      this.autoComplete.setState({\n        searchText: ''\n      });\n      var chips = this.props.value || this.state.chips;\n\n      if (this.props.dataSourceConfig) {\n        if (typeof chip === 'string') {\n          var _chip;\n\n          if (chip.length === 0) {\n            return;\n          }\n\n          chip = (_chip = {}, _defineProperty(_chip, this.props.dataSourceConfig.text, chip), _defineProperty(_chip, this.props.dataSourceConfig.value, chip), _chip);\n        } else if ((typeof chip === 'undefined' ? 'undefined' : _typeof(chip)) === 'object') {\n          var _chip2;\n\n          if (chip[this.props.dataSourceConfig.text].length === 0 || chip[this.props.dataSourceConfig.value].length === 0) {\n            return;\n          }\n\n          chip = (_chip2 = {}, _defineProperty(_chip2, this.props.dataSourceConfig.text, chip[this.props.dataSourceConfig.text]), _defineProperty(_chip2, this.props.dataSourceConfig.value, chip[this.props.dataSourceConfig.value]), _chip2);\n        }\n\n        if (this.props.allowDuplicates || !chips.some(function (c) {\n          return c[_this3.props.dataSourceConfig.value] === chip[_this3.props.dataSourceConfig.value];\n        })) {\n          if (this.props.value) {\n            if (this.props.onRequestAdd) {\n              this.props.onRequestAdd(chip);\n            }\n          } else {\n            this.setState({\n              chips: [].concat(_toConsumableArray(this.state.chips), [chip])\n            });\n\n            if (this.props.onChange) {\n              this.props.onChange([].concat(_toConsumableArray(this.state.chips), [chip]));\n            }\n          }\n        }\n      } else {\n        if (chip.trim().length > 0) {\n          if (this.props.allowDuplicates || chips.indexOf(chip) === -1) {\n            if (this.props.value) {\n              if (this.props.onRequestAdd) {\n                this.props.onRequestAdd(chip);\n              }\n            } else {\n              this.setState({\n                chips: [].concat(_toConsumableArray(this.state.chips), [chip])\n              });\n\n              if (this.props.onChange) {\n                this.props.onChange([].concat(_toConsumableArray(this.state.chips), [chip]));\n              }\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'handleDeleteChip',\n    value: function handleDeleteChip(chip, i) {\n      if (this.props.value) {\n        if (this.props.onRequestDelete) {\n          this.props.onRequestDelete(chip, i);\n        }\n      } else {\n        if (this.props.dataSourceConfig) {\n          var chips = this.state.chips.slice();\n          var changed = chips.splice(i, 1); // remove the chip at index i\n\n          if (changed) {\n            this.setState({\n              chips: chips,\n              focusedChip: this.state.focusedChip && this.state.focusedChip[this.props.dataSourceConfig.value] === chip ? null : this.state.focusedChip\n            });\n\n            if (this.props.onChange) {\n              this.props.onChange(chips);\n            }\n          }\n        } else {\n          var _chips3 = this.state.chips.slice();\n\n          var _changed = _chips3.splice(i, 1); // remove the chip at index i\n\n\n          if (_changed) {\n            this.setState({\n              chips: _chips3,\n              focusedChip: this.state.focusedChip === chip ? null : this.state.focusedChip\n            });\n\n            if (this.props.onChange) {\n              this.props.onChange(_chips3);\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: 'clearInput',\n    value: function clearInput() {\n      this.setState({\n        inputValue: ''\n      });\n    }\n    /**\n     * Sets a reference to the AutoComplete instance.\n     *\n     * Using a bound class method here to set `autoComplete` to avoid it being set\n     * to null by an inline ref callback.\n     *\n     * See [Issue #71](https://github.com/TeamWertarbyte/material-ui-chip-input/issues/71)\n     *\n     * @param {Object} autoComplete - The AutoComplete DOM element or null\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props2 = this.props,\n          children = _props2.children,\n          className = _props2.className,\n          dataSourceConfig = _props2.dataSourceConfig,\n          disabled = _props2.disabled,\n          errorStyle = _props2.errorStyle,\n          errorText = _props2.errorText,\n          fullWidth = _props2.fullWidth,\n          fullWidthInput = _props2.fullWidthInput,\n          hintText = _props2.hintText,\n          hintStyle = _props2.hintStyle,\n          id = _props2.id,\n          inputStyle = _props2.inputStyle,\n          clearOnBlur = _props2.clearOnBlur,\n          onBlur = _props2.onBlur,\n          onChange = _props2.onChange,\n          onFocus = _props2.onFocus,\n          style = _props2.style,\n          chipContainerStyle = _props2.chipContainerStyle,\n          underlineDisabledStyle = _props2.underlineDisabledStyle,\n          underlineFocusStyle = _props2.underlineFocusStyle,\n          underlineShow = _props2.underlineShow,\n          underlineStyle = _props2.underlineStyle,\n          _props2$defaultValue = _props2.defaultValue,\n          defaultValue = _props2$defaultValue === undefined ? [] : _props2$defaultValue,\n          filter = _props2.filter,\n          value = _props2.value,\n          dataSource = _props2.dataSource,\n          floatingLabelFixed = _props2.floatingLabelFixed,\n          floatingLabelFocusStyle = _props2.floatingLabelFocusStyle,\n          floatingLabelStyle = _props2.floatingLabelStyle,\n          floatingLabelText = _props2.floatingLabelText,\n          onBeforeRequestAdd = _props2.onBeforeRequestAdd,\n          onRequestAdd = _props2.onRequestAdd,\n          onRequestDelete = _props2.onRequestDelete,\n          _props2$chipRenderer = _props2.chipRenderer,\n          chipRenderer = _props2$chipRenderer === undefined ? defaultChipRenderer : _props2$chipRenderer,\n          newChipKeyCodes = _props2.newChipKeyCodes,\n          allowDuplicates = _props2.allowDuplicates,\n          other = _objectWithoutProperties(_props2, ['children', 'className', 'dataSourceConfig', 'disabled', 'errorStyle', 'errorText', 'fullWidth', 'fullWidthInput', 'hintText', 'hintStyle', 'id', 'inputStyle', 'clearOnBlur', 'onBlur', 'onChange', 'onFocus', 'style', 'chipContainerStyle', 'underlineDisabledStyle', 'underlineFocusStyle', 'underlineShow', 'underlineStyle', 'defaultValue', 'filter', 'value', 'dataSource', 'floatingLabelFixed', 'floatingLabelFocusStyle', 'floatingLabelStyle', 'floatingLabelText', 'onBeforeRequestAdd', 'onRequestAdd', 'onRequestDelete', 'chipRenderer', 'newChipKeyCodes', 'allowDuplicates']);\n\n      var prepareStyles = this.context.muiTheme.prepareStyles;\n      var styles = getStyles(this.props, this.context, this.state);\n      var inputId = id || this.uniqueId;\n      var inputProps = {\n        id: inputId,\n        ref: function ref(elem) {\n          _this4.input = elem;\n        },\n        disabled: !!this.props.disabled,\n        onBlur: this.handleInputBlur,\n        onFocus: this.handleInputFocus,\n        onKeyDown: this.handleKeyDown,\n        onKeyUp: this.handleKeyUp,\n        onKeyPress: this.handleKeyPress,\n        onUpdateInput: this.handleUpdateInput,\n        fullWidth: !!fullWidthInput\n      };\n\n      var inputStyleMerged = _extends(styles.input, inputStyle);\n\n      var hasInput = (this.props.value || this.state.chips).length > 0 || this.state.inputValue.length > 0;\n      var showHintText = hintText && !hasInput;\n      var shrinkFloatingLabel = floatingLabelText && (hasInput || this.state.isFocused || floatingLabelFixed);\n\n      var errorTextElement = this.state.errorText && _react2.default.createElement('div', {\n        style: prepareStyles(_extends(styles.error, errorStyle))\n      }, this.state.errorText);\n\n      var floatingLabelTextElement = floatingLabelText && _react2.default.createElement(_TextFieldLabel2.default, {\n        muiTheme: this.context.muiTheme,\n        style: _extends(styles.floatingLabel, this.props.floatingLabelStyle),\n        shrinkStyle: _extends(styles.floatingLabelFocusStyle, this.props.floatingLabelFocusStyle),\n        htmlFor: inputId,\n        shrink: shrinkFloatingLabel,\n        disabled: disabled\n      }, floatingLabelText);\n\n      var overrideRootStyles = {};\n\n      if (floatingLabelText) {\n        overrideRootStyles.marginTop = 14;\n      }\n\n      if (fullWidth) {\n        overrideRootStyles.width = '100%';\n      }\n\n      if (disabled) {\n        overrideRootStyles.cursor = 'not-allowed';\n      }\n\n      var chips = this.props.value || this.state.chips;\n      var autoCompleteData = dataSourceConfig ? (dataSource || []).filter(function (value) {\n        return !chips.some(function (c) {\n          return c[dataSourceConfig.value] === value[dataSourceConfig.value];\n        });\n      }) : (dataSource || []).filter(function (value) {\n        return chips.indexOf(value) < 0;\n      });\n      var actualFilter = other.openOnFocus ? function (search, key) {\n        return search === '' || filter(search, key);\n      } : filter;\n      return _react2.default.createElement('div', {\n        className: className,\n        style: prepareStyles(_extends(styles.root, style, overrideRootStyles)),\n        onClick: function onClick() {\n          return _this4.focus();\n        }\n      }, _react2.default.createElement('div', null, floatingLabelTextElement, _react2.default.createElement('div', {\n        style: _extends(styles.chipContainer, chipContainerStyle)\n      }, chips.map(function (tag, i) {\n        var value = dataSourceConfig ? tag[dataSourceConfig.value] : tag;\n        return chipRenderer({\n          value: value,\n          text: dataSourceConfig ? tag[dataSourceConfig.text] : tag,\n          chip: tag,\n          isDisabled: disabled,\n          isFocused: dataSourceConfig ? _this4.state.focusedChip && _this4.state.focusedChip[dataSourceConfig.value] === value : _this4.state.focusedChip === value,\n          handleClick: function handleClick() {\n            return _this4.setState({\n              focusedChip: tag\n            });\n          },\n          handleRequestDelete: function handleRequestDelete() {\n            return _this4.handleDeleteChip(value, i);\n          },\n          defaultStyle: styles.defaultChip\n        }, i);\n      }))), hintText ? _react2.default.createElement(_TextFieldHint2.default, {\n        muiTheme: this.context.muiTheme,\n        show: showHintText && !(floatingLabelText && !floatingLabelFixed && !this.state.isFocused),\n        style: _extends({\n          bottom: 20,\n          pointerEvents: 'none'\n        }, hintStyle),\n        text: hintText\n      }) : null, _react2.default.createElement(_AutoComplete2.default, _extends({}, other, inputProps, {\n        filter: actualFilter,\n        style: inputStyleMerged,\n        dataSource: autoCompleteData,\n        dataSourceConfig: dataSourceConfig,\n        searchText: this.state.inputValue,\n        underlineShow: false,\n        ref: this.setAutoComplete\n      })), underlineShow ? _react2.default.createElement(_TextFieldUnderline2.default, {\n        disabled: disabled,\n        disabledStyle: underlineDisabledStyle,\n        error: !!this.state.errorText,\n        errorStyle: errorStyle,\n        focus: this.state.isFocused,\n        focusStyle: underlineFocusStyle,\n        muiTheme: this.context.muiTheme,\n        style: underlineStyle\n      }) : null, errorTextElement);\n    }\n  }]);\n\n  return ChipInput;\n}(_react2.default.Component);\n\nChipInput.contextTypes = {\n  muiTheme: _propTypes2.default.object.isRequired\n};\nChipInput.propTypes = {\n  style: _propTypes2.default.object,\n  chipContainerStyle: _propTypes2.default.object,\n  floatingLabelText: _propTypes2.default.node,\n  hintText: _propTypes2.default.node,\n  id: _propTypes2.default.string,\n  dataSourceConfig: _propTypes2.default.shape({\n    text: _propTypes2.default.string.isRequired,\n    value: _propTypes2.default.string.isRequired\n  }),\n  disabled: _propTypes2.default.bool,\n  defaultValue: _propTypes2.default.array,\n  onChange: _propTypes2.default.func,\n  value: _propTypes2.default.array,\n  onBeforeRequestAdd: _propTypes2.default.func,\n  onRequestAdd: _propTypes2.default.func,\n  onRequestDelete: _propTypes2.default.func,\n  dataSource: _propTypes2.default.array,\n  onUpdateInput: _propTypes2.default.func,\n  openOnFocus: _propTypes2.default.bool,\n  chipRenderer: _propTypes2.default.func,\n  newChipKeyCodes: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  clearOnBlur: _propTypes2.default.bool,\n  allowDuplicates: _propTypes2.default.bool\n};\nChipInput.defaultProps = {\n  filter: _AutoComplete2.default.caseInsensitiveFilter,\n  newChipKeyCodes: [13],\n  clearOnBlur: true,\n  allowDuplicates: false,\n  underlineShow: true\n};\nexports.default = ChipInput;","map":null,"metadata":{},"sourceType":"script"}